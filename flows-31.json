[
    {
        "id": "23d6b8c35a93da12",
        "type": "tab",
        "label": "Sensor Test",
        "disabled": true,
        "info": ""
    },
    {
        "id": "9cc03edbbd47b355",
        "type": "ncd-gateway-node",
        "z": "23d6b8c35a93da12",
        "name": "",
        "connection": "",
        "unknown_devices": 0,
        "outputs": 1,
        "x": 130,
        "y": 100,
        "wires": [
            [
                "6e9966b19ad5e3ee",
                "23f94e57eb189caf"
            ]
        ]
    },
    {
        "id": "6e9966b19ad5e3ee",
        "type": "switch",
        "z": "23d6b8c35a93da12",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "sensor_data",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 350,
        "y": 100,
        "wires": [
            [
                "a8a0458e058ee597"
            ]
        ]
    },
    {
        "id": "a8a0458e058ee597",
        "type": "function",
        "z": "23d6b8c35a93da12",
        "name": "Sensor Transmission Update",
        "func": "var sensors = flow.get(\"discovered_sensors\");\nvar sensorsData = flow.get(\"sensors_data\");\nvar validatedSensors = [];\nvar sensorArray = [];\n\nif(msg.topic == \"sensor_data\"){\n    \n    var sensorData = msg.payload;\n    \n    if(flow.get(\"selected_sensor\") != undefined){\n        msg.payload = flow.get(\"selected_sensor\");\n    }\n    \n    delete sensorData.original;\n    delete sensorData.type;\n    var date = new Date(sensorData.received);\n    sensorData.received = date;\n    \n    // var sensors = flow.get(\"discovered_sensors\");\n    \n    if(!(sensorData.addr in sensors)){\n        sensorData.validated = false;\n        sensorData.validation_step = 0;\n        sensorsData[sensorData.addr] = {};\n        var sensorValidationData = sensorsData[sensorData.addr];\n        sensorValidationData[\"validation_steps\"] = [];\n    }else{\n        sensorData.validated = sensors[sensorData.addr].validated;\n        sensorData.validation_step = sensors[sensorData.addr].validation_step;\n    }\n    \n    sensors[sensorData.addr] = sensorData;\n    \n    // var validatedSensors = [];\n    // var sensorArray = [];\n    \n    for (const sensor in sensors) {\n        if(!sensors[sensor].validated){\n            sensorArray.push(sensor);\n        }else{\n            validatedSensors.push(sensor);\n        }\n    }\n}else{\n    // var sensors = flow.get(\"discovered_sensors\");\n    // var sensorArray = [];\n    for (const sensor in sensors) {\n        if(!sensors[sensor].validated){\n            sensorArray.push(sensor);\n        }else{\n            validatedSensors.push(sensor);\n        }\n    }\n    \n}\nmsg.payload = \"\";\nfor(i = 0; i < validatedSensors.length; i++){\n    msg.payload += validatedSensors[i]+\"<br>\";\n}\nmsg.options = sensorArray;\nmsg.options_2 = {};\nmsg.options_2[\"header\"] = \"Discovered\"\nmsg.options_2.data = [];\nfor(i = 0; i < sensorArray.length; i++){\n    var item = {};\n    item[\"value\"] = sensorArray[i];\n    msg.options_2.data[i] = item;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nflow.set(\"discovered_sensors\",{});\nflow.set(\"selected_sensor\",\"\");\nflow.set(\"sensors_data\",{});\nvar msg = {};\nmsg.options_2 = {\"data\":[]};\nmsg.validated = \"\";\nreturn msg;",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 100,
        "wires": [
            [
                "08a0ae23ce11fa90",
                "56cb28b0a3290620",
                "39c84af4f9d33cdb",
                "8923ae2a54e3ed72"
            ]
        ]
    },
    {
        "id": "846ee8bebf7a89f5",
        "type": "inject",
        "z": "23d6b8c35a93da12",
        "name": "Dummy Data",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "sensor_data",
        "payload": "{\"addr\":\"00:13:A2:00:01:02:03:04\",\"sensor_type\":1,\"sensor_data\":{\"temperature\":16,\"humidity\":16}}",
        "payloadType": "json",
        "x": 670,
        "y": 600,
        "wires": [
            [
                "9bc8cd481ea773e1"
            ]
        ]
    },
    {
        "id": "3826f5d5c360e706",
        "type": "function",
        "z": "23d6b8c35a93da12",
        "name": "Set Selected",
        "func": "var sensors = flow.get(\"discovered_sensors\");\nflow.set(\"selected_sensor\", msg.payload);\nmsg.payload = sensors[msg.payload];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 100,
        "wires": [
            [
                "c9eacb9e138d28ec"
            ]
        ]
    },
    {
        "id": "60121725c6bca6d6",
        "type": "template",
        "z": "23d6b8c35a93da12",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<html lang=\"en\">\n    <head>\n    <meta charset=\"UTF-8\">\n    </head>\n    <h2>{{payload.addr}}</h2>\n    <table>\n        {{#payload.info}}\n            <tr>\n                <td>{{key}}</td>\n                <td>{{value}}</td>\n            </tr>\n        {{/payload.info}}\n    </table>\n</html>",
        "output": "str",
        "x": 1700,
        "y": 100,
        "wires": [
            [
                "c35592f78a2603de"
            ]
        ]
    },
    {
        "id": "c35592f78a2603de",
        "type": "ui_template",
        "z": "23d6b8c35a93da12",
        "group": "d23729ef180917d9",
        "name": "Sensor View",
        "order": 1,
        "width": "8",
        "height": "25",
        "format": "<div ng-bind-html=\"msg.payload\"></div>\n<div id=\"validate_button\">\n   <md-button\n   data-payload={{msg.selectedDevice}}>Validate\n   </md-button>\n</div>\n\n<script>\n\n(function($scope) {\n\n$('#validate_button').on('click', function(e) {\n    e.preventDefault(); //prevent default behavior\n    $scope.send({\"topic\":\"validate\",\"payload\": $scope.msg.selectedDevice});\n});\n    \n})(scope);\n\n</script>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 1890,
        "y": 100,
        "wires": [
            [
                "d961298bf13399b4"
            ]
        ]
    },
    {
        "id": "c9eacb9e138d28ec",
        "type": "function",
        "z": "23d6b8c35a93da12",
        "name": "",
        "func": "var info = msg.payload;\nif(info == \"\" || info.validated){\n    msg.payload = \"\";\n    return msg;\n}\nvar infoArray = [];\nconsole.log(\"info is: \"+info);\nif(msg.payload == \"\" || flow.get(\"selected_sensor\") == \"\"){\n    console.log(\"payload is empty\");\n    return;\n}\n\nfor(const kv in info){\n    if(`${kv}` == \"instruction\"){\n        continue;\n    }\n    if(`${kv}` == \"sensor_data\"){\n        var key = `${kv}`\n        if(key == \"instruction\"){\n            continue;\n        }\n        var nestedObj = info[key];\n        for(const dataKV in nestedObj){\n            if(dataKV == \"instruction\"){\n                continue;\n            }\n            var nestedData = {};\n            nestedData[\"key\"] = `${dataKV}`;\n            nestedData[\"value\"] = `${nestedObj[dataKV]}`\n            infoArray.push(nestedData);\n        }\n    }else{\n        if(`${kv}` != \"info\"){\n            if(`${kv}` == \"instruction\"){\n                continue;\n            }\n            var obj = {};\n            obj[\"key\"] = `${kv}`;\n            obj[\"value\"] = `${info[kv]}`\n            infoArray.push(obj);\n        }\n    }\n}\nvar validationFile = JSON.parse(flow.get(\"validation_file\"));\nvar sensorType = info.sensor_type;\nvar sensorValidationRoot = validationFile[sensorType.toString()];\nvar sensorValidation = sensorValidationRoot[info.validation_step];\nconsole.log(sensorValidationRoot);\nconsole.log(sensorValidation);\nvar instructionObject = {\"key\":\"instructions\",\"value\":sensorValidation.instruction};\ninfoArray.push(instructionObject);\n\nmsg.payload[\"info\"] = infoArray;\nmsg.selectedDevice = flow.get(\"selected_sensor\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1530,
        "y": 100,
        "wires": [
            [
                "60121725c6bca6d6"
            ]
        ]
    },
    {
        "id": "eb291a3b795e047d",
        "type": "function",
        "z": "23d6b8c35a93da12",
        "name": "",
        "func": "var sensors = flow.get(\"discovered_sensors\");\nif(sensors != undefined){\n       if(flow.get(\"selected_sensor\") != undefined){\n        var selectedSensor = flow.get(\"selected_sensor\");\n        if(selectedSensor in flow.get(\"discovered_sensors\")){\n            if(!sensors[selectedSensor].validated){\n                msg.payload = sensors[selectedSensor];\n                if(\"info\" in msg.payload){\n                    delete msg.payload.info;\n            }   \n            }else{\n                msg.payload = \"\";\n            }\n            return msg; \n        }\n    } \n}\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nvar msg = {};\nmsg.payload = \"\";\nreturn msg;",
        "finalize": "",
        "libs": [],
        "x": 1340,
        "y": 180,
        "wires": [
            [
                "c9eacb9e138d28ec"
            ]
        ]
    },
    {
        "id": "a92ccea29a5dbaa2",
        "type": "inject",
        "z": "23d6b8c35a93da12",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payloadType": "str",
        "x": 630,
        "y": 360,
        "wires": [
            [
                "926dfc09e4c20058",
                "08a0ae23ce11fa90"
            ]
        ]
    },
    {
        "id": "ad21aaf08e2b1635",
        "type": "link out",
        "z": "23d6b8c35a93da12",
        "name": "",
        "links": [
            "32809b568cfe9159",
            "bde3977bde921f65"
        ],
        "x": 2215,
        "y": 60,
        "wires": []
    },
    {
        "id": "32809b568cfe9159",
        "type": "link in",
        "z": "23d6b8c35a93da12",
        "name": "",
        "links": [
            "ad21aaf08e2b1635",
            "9bc8cd481ea773e1",
            "3bed8237514d2fea"
        ],
        "x": 395,
        "y": 60,
        "wires": [
            [
                "a8a0458e058ee597"
            ]
        ]
    },
    {
        "id": "d961298bf13399b4",
        "type": "function",
        "z": "23d6b8c35a93da12",
        "name": "Validate",
        "func": "if(msg.topic != \"validate\"){\n    return null;\n}\nvar validationCheck = JSON.parse(flow.get(\"validation_file\"));\nvar sensors = flow.get(\"discovered_sensors\");\nvar sensor = sensors[msg.payload];\n\nvar sensorType = sensor.sensor_type;\nvar readings = sensor.sensor_data;\n\nvar validationStepsArray = validationCheck[sensorType.toString()];\n\nvar currentStepData = validationStepsArray[sensor.validation_step];\nconsole.log(\"validation Step: \"+sensor.validation_step);\nvar validated = true;\nfor(var variable in readings){\n    if(variable == \"instruction\"){\n        continue;\n    }\n    var validationObject = currentStepData[variable];\n    console.log(\"validating: \"+variable+\" current value: \"+readings[variable]+\" high: \"+validationObject[\"high\"]+\" low: \"+validationObject[\"low\"]);\n    \n    if(readings[variable]<validationObject[\"low\"] || readings[variable]>validationObject[\"high\"]){\n        console.log(\"reading outside range\");\n        validated = false;\n    }else{\n        console.log(\"reading inside range\");\n    }\n}\n\nif(validated){\n    sensor.validation_step++;\n    flow.set(\"discovered_sensors\", sensors);\n    var sensorValidationObjects = flow.get(\"sensors_data\");\n    var sensorValidationObject = sensorValidationObjects[sensor.addr];\n    sensorValidationObject[\"validation_steps\"].push(sensor.sensor_data);\n    if(sensor.validation_step >= validationStepsArray.length){\n        sensorValidationObject[\"test_engineer\"] = flow.get(\"user\");\n        sensorValidationObject[\"order_number\"] = flow.get(\"order\");\n        sensorValidationObject[\"address\"] = sensor.addr;\n        sensorValidationObject[\"test_date\"] = new Date(sensor.received);\n        sensor.validated = true;\n        msg.payload = sensor;\n        var validate = {};\n        validate.payload = JSON.stringify(sensorValidationObject);\n        validate.address = sensor.addr;\n        validate.test_engineer = flow.get(\"user\");\n        return [msg,validate];\n    }else{\n        msg.payload = sensor;\n        return [msg,null];\n    }\n    \n}\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2080,
        "y": 100,
        "wires": [
            [
                "ad21aaf08e2b1635"
            ],
            [
                "adf575abf0179d29",
                "c1202d559bc8ddf6",
                "eccf2fb2ae390ca6"
            ]
        ]
    },
    {
        "id": "08a0ae23ce11fa90",
        "type": "ui_text",
        "z": "23d6b8c35a93da12",
        "group": "3623d67e0237418e",
        "order": 1,
        "width": "0",
        "height": "0",
        "name": "Validated List",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "test-class",
        "x": 860,
        "y": 200,
        "wires": []
    },
    {
        "id": "91ce352f28638327",
        "type": "ui_template",
        "z": "23d6b8c35a93da12",
        "group": "dc53cc09.4e298",
        "name": "dashboard CSS",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "<style id=\"blue-dashboard\">\n\n.list-class{\n    height: 0; !important\n}\n\n.device-list-button{\n    width:97%; !important\n    margin: 0 auto; !important\n}\n\nbody.nr-dashboard-theme md-content md-card {\n    background:transparent;\n    color: rgb(215 223 245);\n}\n\n#Production_Production{\n    height: 1344px;\n    /*background-color: #00000000;*/\n    /*border: 0px !important;*/\n}\n\n#Production_Validated_Sensors{\n    height: 1344px; !important\n}\n#discovered_devices{\n    height: 100%;\n}\n\nul{\n    list-style-type:none;\n    padding-left: 0;\n    max-height:800px;\n    overflow:auto;\n}\n\nli{\n    \n}\n\n.list-class{\n    height: auto !important;\n}\n\n.nr-dashboard-cardcontainer{\n}\n\n.nr-dashboard-theme p.label{\n    font-size: 15px;\n    /*padding-top: 25px;*/\n    \n}\n\n.nr-dashboard-theme p{\n    text-align: left !important;\n    width: inherit !important;\n}\n\n\n.nr-dashboard-text{\n    height: auto !important;\n    layout-align: start start;\n}\n\n.nr-dashboard-theme p {\n    font-size: 15px;\n    font-weight: bold;\n    color: #FFFFFF;\n    word-wrap: break-word;\n    text-align: start start;\n    /*padding-bottom: 25px;*/\n}\n\n.nr-dashboard-theme md-select-menu{\n    visibility: visible !important;\n    display: block !important;\n}\n\n.nr-dashboard-theme table {\n  border: 4px solid #555555;\n  /*background-color: #555555;*/\n  width: 400px;\n  /*text-align: center;*/\n  border-collapse: collapse;\n}\n.nr-dashboard-theme td, table.steelBlueCols th {\n  border: 1px solid #555555;\n  padding: 5px 10px;\n}\n.nr-dashboard-theme tbody td {\n  font-size: 15px;\n  font-weight: bold;\n  color: #FFFFFF;\n}\n/*.nr-dashboard-theme td:nth-child(even) {*/\n/*  background: #398AA4;*/\n/*}*/\n.nr-dashboard-theme thead {\n  background: #398AA4;\n  border-bottom: 10px solid #398AA4;\n}\n.nr-dashboard-theme thead th {\n  font-size: 20px;\n  font-weight: bold;\n  color: #FFFFFF;\n  text-align: left;\n  border-left: 2px solid #398AA4;\n}\n.nr-dashboard-theme thead th:first-child {\n  border-left: none;\n}\n\n.nr-dashboard-theme tfoot td {\n  font-size: 13px;\n}\n.nr-dashboard-theme tfoot .links {\n  text-align: right;\n}\n.nr-dashboard-theme tfoot .links a{\n  display: inline-block;\n  background: #FFFFFF;\n  color: #398AA4;\n  padding: 2px 8px;\n  border-radius: 5px;\n}\n\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "global",
        "className": "",
        "x": 1780,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "858f42c136959257",
        "type": "ui_text_input",
        "z": "23d6b8c35a93da12",
        "name": "User Name",
        "label": "Enter User Name",
        "tooltip": "",
        "group": "0eac6b6972a503b6",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "topicType": "msg",
        "x": 830,
        "y": 440,
        "wires": [
            [
                "743ea0d7539a1693"
            ]
        ]
    },
    {
        "id": "743ea0d7539a1693",
        "type": "change",
        "z": "23d6b8c35a93da12",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "user",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1050,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "71cf0c22c9f936d5",
        "type": "change",
        "z": "23d6b8c35a93da12",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "order",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1060,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "bde3977bde921f65",
        "type": "link in",
        "z": "23d6b8c35a93da12",
        "name": "",
        "links": [
            "ad21aaf08e2b1635"
        ],
        "x": 1375,
        "y": 40,
        "wires": [
            [
                "c9eacb9e138d28ec"
            ]
        ]
    },
    {
        "id": "6fc3064ece46af40",
        "type": "ui_text_input",
        "z": "23d6b8c35a93da12",
        "name": "Order Number",
        "label": "Enter Order Number",
        "tooltip": "",
        "group": "0eac6b6972a503b6",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "topicType": "msg",
        "x": 840,
        "y": 480,
        "wires": [
            [
                "71cf0c22c9f936d5"
            ]
        ]
    },
    {
        "id": "3f618dc4afaf9530",
        "type": "inject",
        "z": "23d6b8c35a93da12",
        "name": "Dummy Data",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "sensor_data",
        "payload": "{\"addr\":\"00:13:A2:00:01:02:03:05\",\"sensor_type\":1,\"sensor_data\":{\"temperature\":50}}",
        "payloadType": "json",
        "x": 670,
        "y": 640,
        "wires": [
            [
                "9bc8cd481ea773e1"
            ]
        ]
    },
    {
        "id": "ea6af60246767e60",
        "type": "inject",
        "z": "23d6b8c35a93da12",
        "name": "Dummy Data",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "sensor_data",
        "payload": "{\"addr\":\"00:13:A2:00:01:02:03:06\",\"sensor_type\":1,\"sensor_data\":{\"temperature\":50}}",
        "payloadType": "json",
        "x": 670,
        "y": 680,
        "wires": [
            [
                "9bc8cd481ea773e1"
            ]
        ]
    },
    {
        "id": "4dc7142e6264bec2",
        "type": "inject",
        "z": "23d6b8c35a93da12",
        "name": "Dummy Data",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "sensor_data",
        "payload": "{\"addr\":\"00:13:A2:00:01:02:03:07\",\"sensor_type\":1,\"sensor_data\":{\"temperature\":50}}",
        "payloadType": "json",
        "x": 670,
        "y": 720,
        "wires": [
            [
                "9bc8cd481ea773e1"
            ]
        ]
    },
    {
        "id": "56cb28b0a3290620",
        "type": "ui_template",
        "z": "23d6b8c35a93da12",
        "group": "0eac6b6972a503b6",
        "name": "Discovered List",
        "order": 4,
        "width": 0,
        "height": 0,
        "format": "<h2>Discovered Devices</h2>\n<ul id=\"discovered_devices\">\n</ul>\n<md-button ng-click=\"clicked(b)\">Clear</md-button>\n\n<script>\n    (function(scope) {\n        \n        scope.clicked = function(){\n            var clearMSG = {\"payload\":\"\",\"topic\":\"clear\"};\n            scope.send(clearMSG);\n        }\n        \n        scope.$watch('msg.options_2', function() {\n            console.log(\"here\");\n            // if(typeof scope.msg.options_2 == \"undefined\"){\n            //     console.log(\"options_2 is undefined\");\n            // }else{\n            //     // console.log(scope.msg.options_2)\n            // }\n            console.log(\"triggered\")\n            var devices = scope.msg.options_2.data;\n            var list = document.getElementById(\"discovered_devices\");\n            while( list.firstChild ){\n                list.removeChild( list.firstChild );\n            }\n            for(i = 0; i < devices.length; i++){\n                let list_item = document.createElement(\"li\");\n                let button = document.createElement(\"button\");\n                button.innerHTML = devices[i].value;\n                button.value = devices[i].value;\n                button.onclick = function () {\n                    var myMsg = {\"payload\":this.value,\"topic\":\"sensor_data\"};\n                    scope.send(myMsg);\n                };\n                button.setAttribute(\"class\",\"md-button md-ink-ripple device-list-button\");\n                \n                list_item.appendChild(button);\n                list.appendChild(list_item);\n            }\n        })\n\n    })(scope)\n    \n</script>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "list-class",
        "x": 880,
        "y": 100,
        "wires": [
            [
                "7f2d96c6a7fed671"
            ]
        ]
    },
    {
        "id": "926dfc09e4c20058",
        "type": "file in",
        "z": "23d6b8c35a93da12",
        "name": "",
        "filename": "/Users/traviselliott/Documents/Production_Sensor_Test/sensor_validation.json",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1050,
        "y": 360,
        "wires": [
            [
                "61490a7871a9aea3"
            ]
        ]
    },
    {
        "id": "61490a7871a9aea3",
        "type": "change",
        "z": "23d6b8c35a93da12",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "validation_file",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1480,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "23dd7ca686a3ed40",
        "type": "inject",
        "z": "23d6b8c35a93da12",
        "name": "0",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "sensor_data",
        "payload": "{\t    \"addr\": \"00:13:A2:00:01:02:03:0A\",\t    \"sensor_type\": 2,\t    \"sensor_data\": {\t        \"input_1\": 0\t    },\t    \"received\":$millis()\t}",
        "payloadType": "jsonata",
        "x": 690,
        "y": 760,
        "wires": [
            [
                "9bc8cd481ea773e1"
            ]
        ]
    },
    {
        "id": "64da7ef4cd588dfe",
        "type": "inject",
        "z": "23d6b8c35a93da12",
        "name": "1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "sensor_data",
        "payload": "{\t    \"addr\": \"00:13:A2:00:01:02:03:0A\",\t    \"sensor_type\": 2,\t    \"sensor_data\": {\t        \"input_1\": 1\t    },\t    \"received\":$millis()\t}",
        "payloadType": "jsonata",
        "x": 690,
        "y": 800,
        "wires": [
            [
                "9bc8cd481ea773e1"
            ]
        ]
    },
    {
        "id": "39c84af4f9d33cdb",
        "type": "link out",
        "z": "23d6b8c35a93da12",
        "name": "",
        "links": [
            "11371b8ece13741e"
        ],
        "x": 785,
        "y": 60,
        "wires": []
    },
    {
        "id": "11371b8ece13741e",
        "type": "link in",
        "z": "23d6b8c35a93da12",
        "name": "",
        "links": [
            "39c84af4f9d33cdb"
        ],
        "x": 1195,
        "y": 180,
        "wires": [
            [
                "eb291a3b795e047d"
            ]
        ]
    },
    {
        "id": "7f2d96c6a7fed671",
        "type": "switch",
        "z": "23d6b8c35a93da12",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "sensor_data",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "clear",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1050,
        "y": 100,
        "wires": [
            [
                "3826f5d5c360e706"
            ],
            [
                "b996640c62cfb6b1"
            ]
        ]
    },
    {
        "id": "9bc8cd481ea773e1",
        "type": "link out",
        "z": "23d6b8c35a93da12",
        "name": "",
        "links": [
            "32809b568cfe9159"
        ],
        "x": 835,
        "y": 700,
        "wires": []
    },
    {
        "id": "b996640c62cfb6b1",
        "type": "function",
        "z": "23d6b8c35a93da12",
        "name": "",
        "func": "flow.set(\"discovered_sensors\",{});\nflow.set(\"selected_sensor\",\"\");\nflow.set(\"sensors_data\",{});\n// var msg = {};\nmsg.options_2 = {\"data\":[]};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 240,
        "wires": [
            [
                "3bed8237514d2fea"
            ]
        ]
    },
    {
        "id": "3bed8237514d2fea",
        "type": "link out",
        "z": "23d6b8c35a93da12",
        "name": "",
        "links": [
            "32809b568cfe9159"
        ],
        "x": 1375,
        "y": 240,
        "wires": []
    },
    {
        "id": "8923ae2a54e3ed72",
        "type": "debug",
        "z": "23d6b8c35a93da12",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 140,
        "wires": []
    },
    {
        "id": "adf575abf0179d29",
        "type": "http request",
        "z": "23d6b8c35a93da12",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": false,
        "url": "",
        "persist": false,
        "authType": "",
        "x": 2270,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "c1202d559bc8ddf6",
        "type": "debug",
        "z": "23d6b8c35a93da12",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2250,
        "y": 140,
        "wires": []
    },
    {
        "id": "26f1a8b34b874087",
        "type": "function",
        "z": "23d6b8c35a93da12",
        "name": "",
        "func": "console.log(msg.payload);\n\nvar PTOUCH_ESC_P_MODE = Buffer.from([0x1b, 0x69, 0x61, 0x00]);\nvar INITIALIZE = Buffer.from([0x1b,0x40]);\nvar LARGE_QR = Buffer.from([0x1b,0x69,0x51,0x0C,0x02,0x00,0x00,0x00,0x00,0x02,0x00]);\nvar AUTO_LENGTH = Buffer.from([0x1b,0x69,0x6c,0x00,0x00]);\nvar LEFT_MARGIN = Buffer.from([0x1b, 0x24, 0x3C, 0x00]);\nvar FONT = Buffer.from([0x1B, 0x6B, 0x00]);\nvar FONT_SIZE = Buffer.from([0x1B, 0x58, 0x34]);\n\nvar payload = [];\npayload.push(PTOUCH_ESC_P_MODE); //Command to put printer in ESC P command mode\npayload.push(INITIALIZE); //Command to initialize printer for commands\n\n//QR Code Bytes\npayload.push(LARGE_QR); //QR code config bytes 12 dots per per cell, Model 2, auto input\npayload.push(Buffer.from(msg.address+\"\\\\\\\\\\\\\", \"utf-8\")); //Payload to embed in QR Code.  Note requires three \\ to end QR payload\n//Text bytes\npayload.push(AUTO_LENGTH); //Auto set length of label\npayload.push(LEFT_MARGIN); //1\" left margin to allow for QR code on left side of label\npayload.push(FONT); //Helsinki font\npayload.push(FONT_SIZE); //12pt font size\npayload.push(Buffer.from(msg.address.substring(0,11)+\"\\n\", \"utf-8\"));  //print first half of address on top line\npayload.push(LEFT_MARGIN); //1\" left margin to allow for QR code on left side of label\npayload.push(Buffer.from(msg.address.substring(12,23)+\"\\n\", \"utf-8\"));  //print second half of address on second line\npayload.push(LEFT_MARGIN); //1\" left margin to allow for QR code on left side of label\npayload.push(Buffer.from(\"QC: \"+msg.test_engineer, \"utf-8\")); //print quality control engineer on third line\npayload.push(Buffer.from([0x0c])); //execute print command\n\n// console.log(\"First Line: \"+msg.payload.address.substring(0,11) +\"second line:\"+ msg.payload.address.substring(12,23)+\"third line:\"+msg.payload.test_engineer);\n\nmsg.payload = Buffer.concat(payload);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2260,
        "y": 180,
        "wires": [
            [
                "4b7dcbf749329209"
            ]
        ]
    },
    {
        "id": "4b7dcbf749329209",
        "type": "tcp out",
        "z": "23d6b8c35a93da12",
        "name": "",
        "host": "192.168.0.50",
        "port": "9100",
        "beserver": "client",
        "base64": false,
        "end": true,
        "x": 2480,
        "y": 180,
        "wires": []
    },
    {
        "id": "23f94e57eb189caf",
        "type": "debug",
        "z": "23d6b8c35a93da12",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 380,
        "y": 180,
        "wires": []
    },
    {
        "id": "1ba785d0cba36bcf",
        "type": "http request",
        "z": "23d6b8c35a93da12",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 2050,
        "y": 280,
        "wires": [
            [
                "39814fd82d44159c",
                "03471ac58786cdc0",
                "1e22c0c47bf6307e"
            ]
        ]
    },
    {
        "id": "f33a91f79aeeb1d5",
        "type": "debug",
        "z": "23d6b8c35a93da12",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2350,
        "y": 600,
        "wires": []
    },
    {
        "id": "be13e887d5b10d55",
        "type": "inject",
        "z": "23d6b8c35a93da12",
        "name": "",
        "props": [
            {
                "p": "url",
                "v": "https://api01-iiot.advancedtech.com/api/v1/qr/create/?sensor_mac=0013a2004190dff1&sensor_type=81",
                "vt": "str"
            },
            {
                "p": "headers",
                "v": "{\"Authorization\":\"Basic bmNkX3VzZXI6Nlg1SGFFS01ZdkRMUDV2RA==\"}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1930,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "eccf2fb2ae390ca6",
        "type": "function",
        "z": "23d6b8c35a93da12",
        "name": "",
        "func": "var address = msg.address.replace(/:/g,'');\nmsg.url = \"https://api01-iiot.advancedtech.com/api/v1/qr/create/?sensor_mac=\"+address+\"&sensor_type=81\"\nmsg.headers = {\"Authorization\": \"Basic bmNkX3VzZXI6Nlg1SGFFS01ZdkRMUDV2RA==\"};\ndelete msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1880,
        "y": 280,
        "wires": [
            [
                "1ba785d0cba36bcf"
            ]
        ]
    },
    {
        "id": "39814fd82d44159c",
        "type": "debug",
        "z": "23d6b8c35a93da12",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2250,
        "y": 340,
        "wires": []
    },
    {
        "id": "03471ac58786cdc0",
        "type": "function",
        "z": "23d6b8c35a93da12",
        "name": "",
        "func": "console.log(msg.payload);\n\nvar obj = JSON.parse(msg.payload);\n\nvar PTOUCH_ESC_P_MODE = Buffer.from([0x1b, 0x69, 0x61, 0x00]);\nvar INITIALIZE = Buffer.from([0x1b,0x40]);\nvar LARGE_QR = Buffer.from([0x1b,0x69,0x51,0x0C,0x02,0x00,0x00,0x00,0x00,0x02,0x00]);\nvar AUTO_LENGTH = Buffer.from([0x1b,0x69,0x6c,0x00,0x00]);\nvar LEFT_MARGIN = Buffer.from([0x1b, 0x24, 0x3C, 0x00]);\nvar FONT = Buffer.from([0x1B, 0x6B, 0x00]);\nvar FONT_SIZE = Buffer.from([0x1B, 0x58, 0x34]);\n\nvar payload = [];\npayload.push(PTOUCH_ESC_P_MODE); //Command to put printer in ESC P command mode\npayload.push(INITIALIZE); //Command to initialize printer for commands\n\n//QR Code Bytes\npayload.push(LARGE_QR); //QR code config bytes 12 dots per per cell, Model 2, auto input\npayload.push(Buffer.from(obj.mac+\"\\\\\\\\\\\\\", \"utf-8\")); //Payload to embed in QR Code.  Note requires three \\ to end QR payload\n\n//Text bytes\npayload.push(AUTO_LENGTH); //Auto set length of label\n //1\" left margin to allow for QR code on left side of label\npayload.push(FONT); //Helsinki font\npayload.push(FONT_SIZE); //12pt font size\npayload.push(LEFT_MARGIN);\npayload.push(Buffer.from(obj.ats_label+\"\\n\", \"utf-8\"));\npayload.push(LEFT_MARGIN);\npayload.push(Buffer.from(obj.mac.substring(0,11)+\"\\n\", \"utf-8\"));  //print first half of address on top line\npayload.push(LEFT_MARGIN); //1\" left margin to allow for QR code on left side of label\npayload.push(Buffer.from(obj.mac.substring(12,23), \"utf-8\"));  //print second half of address on second line\npayload.push(Buffer.from([0x0c])); //execute print command\n\n// console.log(\"First Line: \"+msg.payload.address.substring(0,11) +\"second line:\"+ msg.payload.address.substring(12,23)+\"third line:\"+msg.payload.test_engineer);\n\nmsg.payload = Buffer.concat(payload);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2260,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "1e22c0c47bf6307e",
        "type": "function",
        "z": "23d6b8c35a93da12",
        "name": "",
        "func": "console.log(msg.payload);\nvar obj = JSON.parse(msg.payload);\n\nvar PTOUCH_ESC_P_MODE = Buffer.from([0x1b, 0x69, 0x61, 0x00]);\nvar INITIALIZE = Buffer.from([0x1b,0x40]);\nvar LARGE_QR_1 = Buffer.from([0x1b,0x69,0x51,0x0C,0x02,0x01,0x01,0x02,0xFF,0x02,0x00]);\nvar LARGE_QR_2 = Buffer.from([0x1b,0x69,0x51,0x0C,0x02,0x01,0x02,0x02,0xFF,0x02,0x00]);\nvar LARGE_QR_3 = Buffer.from([0x1b,0x69,0x51,0x0C,0x02,0x01,0x03,0x03,0xFF,0x02,0x00]);\nvar AUTO_LENGTH = Buffer.from([0x1b,0x69,0x6c,0x00,0x00]);\nvar LEFT_MARGIN = Buffer.from([0x1b, 0x24, 0x3C, 0x00]);\nvar FONT = Buffer.from([0x1B, 0x6B, 0x00]);\nvar FONT_SIZE = Buffer.from([0x1B, 0x58, 0x34]);\n\nvar qr_payload = Buffer.from(obj.qr_code,\"utf-8\");\nvar parity = 0;\nfor(i = 0; i < qr_payload.length; i++){\n    parity = parity ^ qr_payload[i];\n}\nconsole.log(\"length: \"+qr_payload.length);\nconsole.log(\"parity: \"+parity);\n\nvar payload = [];\npayload.push(PTOUCH_ESC_P_MODE); //Command to put printer in ESC P command mode\npayload.push(INITIALIZE); //Command to initialize printer for commands\n\n//QR Code Bytes for first partition\nvar partition_one = obj.qr_code.substring(0,32)+\"\\\\\\\\\\\\\";\nconsole.log(\"Partition One: \"+partition_one);\nvar payload_one = Buffer.from(partition_one,\"utf-8\");\nLARGE_QR_1[8] = parity;\npayload.push(LARGE_QR_1); //QR code config bytes 12 dots per per cell, Model 2, auto input\npayload.push(payload_one);\n// payload.push(Buffer.from(\"\\\\\\\\\\\\\",\"utf-8\"));\n\n//QR Code Bytes for Second partition\nvar partition_two = obj.qr_code.substring(32,obj.qr_code.length)+\"\\\\\\\\\\\\\";\nconsole.log(\"Partition Two: \"+partition_two);\nvar payload_two = Buffer.from(partition_two,\"utf-8\");\nLARGE_QR_2[8] = parity;\npayload.push(LARGE_QR_2); //QR code config bytes 12 dots per per cell, Model 2, auto input\npayload.push(payload_two);\n// payload.push(Buffer.from(\"\\\\\\\\\\\\\",\"utf-8\"));\n\n// //QR Code Bytes for Third partition\n// var payload_three = Buffer.from(obj.qr_code.substring(64,obj.qr_code.length),\"utf-8\");\n// LARGE_QR_3[8] = parity;\n// payload.push(LARGE_QR_3); //QR code config bytes 12 dots per per cell, Model 2, auto input\n// payload.push(payload_three);\n// payload.push(Buffer.from(\"\\\\\\\\\\\\\",\"utf-8\"));\n\n//Text bytes\npayload.push(AUTO_LENGTH); //Auto set length of label\n //1\" left margin to allow for QR code on left side of label\npayload.push(FONT); //Helsinki font\npayload.push(FONT_SIZE); //12pt font size\npayload.push(LEFT_MARGIN);\npayload.push(Buffer.from(obj.ats_label+\"\\n\", \"utf-8\"));\npayload.push(LEFT_MARGIN);\npayload.push(Buffer.from(obj.mac.substring(0,11)+\"\\n\", \"utf-8\"));  //print first half of address on top line\npayload.push(LEFT_MARGIN); //1\" left margin to allow for QR code on left side of label\npayload.push(Buffer.from(obj.mac.substring(12,23), \"utf-8\"));  //print second half of address on second line\npayload.push(Buffer.from([0x0c])); //execute print command\n\n// console.log(\"First Line: \"+msg.payload.address.substring(0,11) +\"second line:\"+ msg.payload.address.substring(12,23)+\"third line:\"+msg.payload.test_engineer);\n\nmsg.payload = Buffer.concat(payload);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2260,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "0252541627c47672",
        "type": "ncd-wireless-node",
        "z": "23d6b8c35a93da12",
        "name": "",
        "connection": "",
        "config_comm": "",
        "addr": "",
        "sensor_type": "10006",
        "auto_config": true,
        "node_id_delay_active": "",
        "node_id": 0,
        "delay": 300,
        "destination": "0000FFFF",
        "power_active": "",
        "power": 4,
        "retries_active": "",
        "retries": 10,
        "pan_id_active": "",
        "pan_id": "7FFF",
        "change_enabled": "",
        "change_pr": "0",
        "change_interval": "0",
        "cm_calibration": "60.6",
        "bp_altitude": "0",
        "bp_pressure": "0",
        "bp_temp_prec": "0",
        "bp_press_prec": "0",
        "amgt_accel": "0",
        "amgt_mag": "0",
        "amgt_gyro": "0",
        "impact_accel": "0",
        "impact_data_rate": "4",
        "impact_threshold": 25,
        "impact_duration": 1,
        "activ_interr_x": 1,
        "activ_interr_y": 2,
        "activ_interr_z": 4,
        "activ_interr_op": 8,
        "force_calibration_co2_auto_config": "",
        "force_calibration_co2": 400,
        "filtering": 0,
        "data_rate": 5,
        "time_series": 0,
        "reading_type": 1,
        "mode_80_active": "",
        "mode_80": 0,
        "filter_80_active": "",
        "filter_80": 0,
        "output_data_rate_101_active": "",
        "output_data_rate_101": 0,
        "sampling_duration_101_active": "",
        "sampling_duration_101": 1,
        "sampling_interval_101_active": "",
        "sampling_interval_101": 1,
        "full_scale_range_101_active": "",
        "full_scale_range_101": 1,
        "x_axis_101": "",
        "y_axis_101": "",
        "z_axis_101": "",
        "x": 850,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "d23729ef180917d9",
        "type": "ui_group",
        "name": "Sensor View",
        "tab": "204066a6ddc3caec",
        "order": 2,
        "disp": false,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "3623d67e0237418e",
        "type": "ui_group",
        "name": "Validated Sensors",
        "tab": "204066a6ddc3caec",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "dc53cc09.4e298",
        "type": "ui_group",
        "name": "Form & Switch",
        "tab": "1854ea3c.181436",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "0eac6b6972a503b6",
        "type": "ui_group",
        "name": "Production",
        "tab": "204066a6ddc3caec",
        "order": 1,
        "disp": false,
        "width": "10",
        "collapse": false,
        "className": ""
    },
    {
        "id": "204066a6ddc3caec",
        "type": "ui_tab",
        "name": "Production",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "1854ea3c.181436",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "order": 10,
        "disabled": false,
        "hidden": false
    }
]